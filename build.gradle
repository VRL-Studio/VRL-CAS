apply plugin: 'java'

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
	
task wrapper(type: Wrapper) {
    gradleVersion = '3.1'
}

buildscript {
    
    repositories {
        mavenCentral()
        jcenter()
    }
    
    dependencies {
        classpath (group: 'eu.mihosoft.vrl', name: 'vrl', version: '0.4.3.0.2')
    }
}

repositories {
    mavenCentral()
    jcenter()
    
    maven{
        url 'https://dl.bintray.com/miho/Ext/'
    }
}

dependencies {
    // TODO: Add dependencies here ...
    // You can read more about how to add dependency here:
    //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:how_to_declare_your_dependencies
    testCompile group: 'junit', name: 'junit', version: '4.10'
    
    compile (group: 'eu.mihosoft.vrl', name: 'vrl', version: '0.4.3.0.2')
    compile (group: 'eu.mihosoft.vrl', name: 'vrl', version: '0.4.3.0.2', classifier: 'sources')
    compile (group: 'eu.mihosoft.vrl', name: 'vrl', version: '0.4.3.0.2', classifier: 'javadoc')

    compile group: 'eu.mihosoft.ext.symja', name: 'extsymja', version: '0.2'
}

def loadProperties(String sourceFileName) {
    
    def config = new Properties()
    def propFile = new File(projectDir,sourceFileName)
    
    if (propFile.isFile()) {
        config.load(new FileInputStream(propFile))
        for (Map.Entry property in config) {
            ext.set(property.key, property.value)
        }
    }
}

// create a fat-jar (class files plus dependencies
// excludes VRL.jar (plugin jar files must not start with 'vrl-\\d+')
jar {

    // dependencies except VRL
    from configurations.runtime.asFileTree.
        filter({file->return !file.name.startsWith("vrl-0")}).
        files.collect { zipTree(it) }

    // project class files compiled from source
    from files(sourceSets.main.output.classesDir)
}

// loads the property file
loadProperties('build.properties')

String getVRLDir() {
    
    String result;
    
    if (vrldir==null || vrldir.trim().isEmpty()) {
        result = System.getProperty("user.home");
        result+= "/.vrl/"
        result+= eu.mihosoft.vrl.system.Constants.VERSION_MAJOR
        result+= "/default";
    } else {
        result = vrldir;
    }
    
    return result
}

// compiles and installs the vrl plugin to the specified folder
task installVRLPlugin(dependsOn: [clean,jar]) << {
    println(">> copying vrl plugin to: " + getVRLDir()+"/plugin-updates")
    copy {
        from buildDir.getPath()+"/libs/"+rootProject.name + ".jar"
        into getVRLDir()+"/plugin-updates"
        include '**/*.jar'
    }
}
